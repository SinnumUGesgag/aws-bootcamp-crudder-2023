#!/usr/bin/env python3

import boto3
import sys
import json
import os
import uuid
from datetime import datetime

current_path = os.path.dirname(os.path.abspath(__file__))
parent_path = os.path.abspath(os.path.join(current_path, "..", ".."))
sys.path.append(parent_path)

from lib.db import InteractSQLDB


# Setting Essetinal Attributes for our Client ---------------- >
attributes = {  # point boto3 client at the dynamoDB container we have running locally
    #'endpoint_url': 'http://127.0.0.1:8000'
    'endpoint_url': 'http://dynamodb-local:8000'
}


# if len(sys.argv) == 2:          # pull the arguments being pull has a length of 2, meaning 2 arguments
#     if "prod" in sys.argv[1]:   # if first argument is prod
#         attributes = {}

print(f"""---- Attributes Passed Into boto3.client() : {attributes}  ||||""")
dyDbClient = boto3.client('dynamodb', **attributes)
print(f"""---- Client Returned from boto3.client() : {dyDbClient}  ||||""")

myMock_User_handle = 'Test_User'
table_name = 'cruddur_messages'

#default_user_uuid = "2dfdf41d-03b5-44b2-a729-be69a49415c2" #copied it from the data just for testing this once

def get_my_user_uuids():
    #print(f""" My Handle: {my_handle}""")
    sql = f"""
        SELECT
            users.entry_uuid,
            users.handle
        FROM users
        WHERE
            users.handle = %(handle)s  
    """
    pSQLocalUrl = 'PSQL_CRUDDUR_DB_URL'
    user_returned = InteractSQLDB(pSQLocalUrl).query_user_dict(sql, {'handle': myMock_User_handle })

    my_uuid = user_returned.get('entry_uuid')

    print(f"""---- my_uuid's Type : {type(my_uuid)} ||||""")

    print(f"""---- UUID Returned from InteractSQLDB().query_user_dict : {my_uuid}  ||||""")
    return my_uuid

user_uuid = get_my_user_uuids()
print(f"""---- MY USER UUID being Passed into dyDbClient.query() : {user_uuid} ||||""")

current_year = datetime.now().year
query_parameters = {
    'TableName': table_name,
    'ReturnConsumedCapacity': 'TOTAL',
    'ScanIndexForward': False,
    'KeyConditionExpression': 'pk = :pkID AND begins_with(sk,:year)',
    #'KeyConditionExpression': 'pk = :pkID',
    'ExpressionAttributeValues': {
        ':year': {'S': f"{current_year}"},
        ':pkID': {'S': f"GRP#{user_uuid}"}
    }
}


print(f"""---- Query_Parameters being Passed into dyDbClient.query() : {query_parameters} ||||""")
response = dyDbClient.query(**query_parameters)
print(f"""---- Response from dyDbClient.query() : {response} ||||""")

print(json.dumps(response, sort_keys=True, indent=2))


