#!/usr/bin/env python

import uuid
import os
import boto3
import sys
from datetime import datetime, timedelta, timezone

current_path = os.path.dirname(os.path.abspath(__file__))
parent_path = os.path.abspath(os.path.join(current_path, "..", ".."))
sys.path.append(parent_path)

from lib.db import InteractSQLDB

k = 0

# Setting Essetinal Attributes for our Client ---------------- >
attributes = {  # point boto3 client at the dynamoDB container we have running locally
    'endpoint_url': 'http://127.0.0.1:8000'
}


if len(sys.argv) == 2:          # pull the arguments being pull has a length of 2, meaning 2 arguments
    if "prod" in sys.argv[1]:   # if first argument is prod
        attribute = {}

dyDBclient = boto3.client('dynamodb', **attributes)
# < ----------------



# setting our Test Messages'& Test 'Groups' Data ------------ >
default_message_group_uuid = "a9b2c4d6-7e8f-4a1b-9c2d-3e5f6a7b8c9d" #str(uuid.uuid4())
myMock_User_handle = 'primeruser'
theirMock_User_handle = 'andrewbrown'
message_group_uuid = default_message_group_uuid

default_params = {
    'my_handle': myMock_User_handle,
    'other_handle': theirMock_User_handle
}




# Defining Essential Functions to interact with our DyDB ------------
#  ------------------------------------------------------------------

def get_user_uuids():
    sql = f"""
        SELECT
            users.entry_uuid,
            users.display_name,
            users.handle
        FROM users
        WHERE
            users.handle IN(
                %(my_handle)s,
                %(other_handle)s   
            )
    """
    pSQLocalUrl = 'PSQL_CRUDDUER_DB_URL'
    users = InteractSQLDB(pSQLocalUrl).query_json_array(sql, default_params)

    my_user     =   next((item for item in users if item["handle"] == myMock_User_handle), None)
    other_user  =   next((item for item in users if item["handle"] == theirMock_User_handle), None)
    results = {
        'my_user': my_user,
        'other_user': other_user
    }
    print(f'''--- get_user_uuids ---''')
    return results


users = get_user_uuids() 


def create_message_group(client, message_group_uuid, my_user_uuid, other_user_uuid, other_user_display_name, other_user_handle, last_message_at=None, message=None):
    global k
    k += 1
  
    print(f"""-----------  Message Group Created {k}  -----------""")
    record = {
        'pk':   {'S': f"GRP#{my_user_uuid}"},
        'sk':   {'S': last_message_at},
        'message_group_uuid': {'S': message_group_uuid },
        'message':  {'S': message },
        'user_uuid':  {'S': other_user_uuid },
        'user_display_name': {'S': other_user_display_name },
        'user_handle': {'S': other_user_handle }
    }

    table_name = 'cruddur_messages'
    response = client.put_item(
        TableName=table_name,
        Item=record
    )
    print(f"""<<<<  {response}  >>>>""")


def create_message(client, message_group_uuid, created_at, message, my_user_uuid, my_user_display_name, my_user_handle):
    print(f"""-----------  Message Created  -----------""")
    record = {
        'pk':   {'S': f"MSG#{message_group_uuid}"},
        'sk':   {'S': created_at},
        'message_uuid': {'S': str(uuid.uuid4()) },
        'message':  {'S': message },
        'user_uuid': {'S': my_user_uuid },
        'user_display_name': {'S': my_user_display_name },
        'user_handle':  {'S': my_user_handle }
    }
    

    table_name = 'cruddur_messages'
    response = client.put_item(
        TableName=table_name,
        Item=record
    )
    print(f"""<<<<  {response}  >>>>""")

    #create_message_group(client, message_group_uuid, my_user_uuid, other_user_uuid, other_user_display_name, other_user_handle, last_message_at=None, message=None)

    # instead of create a normal message group we're going to create our test message groups  -------- >
    create_message_group(
        client=dyDBclient,
        message_group_uuid=message_group_uuid,
        my_user_uuid=users['my_user']['entry_uuid'],
        other_user_uuid=users['other_user']['entry_uuid'],
        other_user_display_name=users['other_user']['display_name'],
        other_user_handle=users['other_user']['handle'],
        last_message_at=now.isoformat(),
        message=message
    )

    create_message_group(
        client=dyDBclient,
        message_group_uuid=message_group_uuid,
        my_user_uuid=users['my_user']['entry_uuid'],
        other_user_uuid=users['other_user']['entry_uuid'],
        other_user_display_name=users['other_user']['display_name'],
        other_user_handle=users['other_user']['handle'],
        last_message_at=now.isoformat(),
        message=message
    )
    # < -------- 



# Manually created Test Messages & Message Groups --------------
# --------------------------------------------------------------
now = datetime.now(timezone.utc).astimezone()

test_conversation = """
Person 1: Holy Shit I am so fake
Person 2: You, I am Plastic
Person 1: WTF Is this
Person 2: 404 Leave a Message
"""
print(f'''------- {test_conversation} ------''')
print(f'''------- Test Convo to Message Conversion ------''')

lines = test_conversation.lstrip('\n').rstrip('\n').split('\n')

print(f'''------- Lines to be Processed into Message ------''')
print(f'''------- {lines} ------''')

for i in range(len(lines)):
    if lines[i].startswith('Person 1: '):
        key = 'my_user'
        message = lines[i].replace('Person 1: ', '')
        print(f'''------- Line {i} Has Been Processed for Person 1; Resulting Message: ------''')
        print(f'''{message}''')
        created_at = (now + timedelta(minutes=i)).isoformat()
        create_message(
            client=dyDBclient,
            message_group_uuid=message_group_uuid,
            created_at=created_at,
            message=message,
            my_user_uuid=users[key]['entry_uuid'],
            my_user_display_name=users[key]['display_name'],
            my_user_handle=users[key]['handle']
        )
    elif lines[i].startswith('Person 2: '):
        key = 'other_user'
        message = lines[i].replace('Person 2: ', '')
        print(f'''------- Line {i} Has Been Processed for Person 2; Resulting Message: ------''')
        print(f'''{message}''')
        created_at = (now + timedelta(minutes=i)).isoformat()
        create_message(
            client=dyDBclient,
            message_group_uuid=message_group_uuid,
            created_at=created_at,
            message=message,
            my_user_uuid=users[key]['entry_uuid'],
            my_user_display_name=users[key]['display_name'],
            my_user_handle=users[key]['handle']
        )
    else:
        print(lines[i])
        raise 'Invalid Line'

print(f'''--- Final Message ---''')
print(f"""{message}""")
# <  ------------ 
